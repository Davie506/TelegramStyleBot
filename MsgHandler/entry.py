import json
import boto3
import requests

###
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
###

# –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –ø—Ä–∏—Å—ã–ª–∞–µ–º–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–ö–±)
maxsize = 500

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
content_markup = {'keyboard': [['–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É –±–æ—Ç—É!üì∑']], 'resize_keyboard': True}
style_markup = {'keyboard': [['‚òÄ–õ–µ—Ç–æ >> –ó–∏–º–∞‚õÑ', '‚õÑ–ó–∏–º–∞ >> –õ–µ—Ç–æ‚òÄ'],
                             ['–°—Ç–∏–ª—å –í–∞–Ω –ì–æ–≥–∞üá≥üá±', '–°—Ç–∏–ª—å –£–∫–∏—ë-—çüáØüáµ'],
                             ['–°—Ç–∏–ª—å –ö–ª–æ–¥–∞ –ú–æ–Ω–µüá´üá∑', '–°—Ç–∏–ª—å –ü–æ–ª—è –°–µ–∑–∞–Ω–Ω–∞üá´üá∑']], 'resize_keyboard': True, 'one_time_keyboard': True}

# –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
with open('cred.txt') as file:
    Token = file.readline()
URL = "https://api.telegram.org/bot{}/".format(Token)


def lambda_handler(event, context):
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    try:
        event = json.loads(event['body'])
        print(event)
        msg_handler(event)
    except Exception as e:
        print(f'ERROR:{e} || EVENT:{event}')

    # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º—É –∫–æ–¥ 200
    return {'statusCode': 200}


def msg_handler(event):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        msg = event['message']
    except KeyError:
        return
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = msg['chat']['id']

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DynamoDB
    db = DynamoDB('ImageIdTable')

    if 'photo' in msg.keys():
        photo_handler(user_id, msg['photo'], db)
    elif 'text' in msg.keys():
        styles = {'‚òÄ–õ–µ—Ç–æ >> –ó–∏–º–∞‚õÑ': 'summer2winter_yosemite_pretrained',
                  '‚õÑ–ó–∏–º–∞ >> –õ–µ—Ç–æ‚òÄ': 'winter2summer_yosemite_pretrained',
                  '–°—Ç–∏–ª—å –í–∞–Ω –ì–æ–≥–∞üá≥üá±': 'style_vangogh_pretrained',
                  '–°—Ç–∏–ª—å –£–∫–∏—ë-—çüáØüáµ': 'style_ukiyoe_pretrained',
                  '–°—Ç–∏–ª—å –ö–ª–æ–¥–∞ –ú–æ–Ω–µüá´üá∑': 'style_monet_pretrained',
                  '–°—Ç–∏–ª—å –ü–æ–ª—è –°–µ–∑–∞–Ω–Ω–∞üá´üá∑': 'style_cezanne_pretrained'}

        text = msg['text']
        if text[0] == '/':
            # —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
            commands_handler(user_id, msg['text'], db)
        else:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            content_id = db.get_item(user_id)
            if content_id and content_id[:4] != 'wait':
                if text in styles:
                    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
                    message_id = send_sticker(user_id, 'loading')
                    db.update_item(user_id, message_id)

                    style = styles[text]
                    content = get_file(content_id)
                    try:
                        invoke_sm('CycleGAN', user_id, content, style)
                    except Exception:
                        db.delete_item(user_id)
                        delete_message(user_id, message_id)
                        send_message(user_id,
                                     "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è –≤—ã–∫–ª—é—á–µ–Ω. <b>/help - –ø–æ–¥—Ä–æ–±–Ω–µ–µ.</b>")
                else:
                    send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–∫–∞—Ä—Ç–∏–Ω–∫—É</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!üëáüëá",
                                 style_markup)
            elif not content_id:
                send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–∫–∞—Ä—Ç–∏–Ω–∫—É</b>, –∞ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            else:
                send_message(user_id,
                             "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞!</b>\n<i>–í —Å–ª—É—á–∞–µ –æ–∂–∏–¥–∞–Ω–∏—è –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/cancel</b>.</i>")

    else:
        send_message(user_id, "<b>–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–∞–π–ª!</b>\n<i>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª!</i>")


def photo_handler(user_id, photo, db):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    content_id = db.get_item(user_id)
    if content_id:
        if content_id[:4] == 'wait':
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ–≥–¥–∞ –±–æ—Ç –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–∞—Ä—É—é
            send_message(user_id,
                         "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞!</b>\n<i>–í —Å–ª—É—á–∞–µ –æ–∂–∏–¥–∞–Ω–∏—è –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/cancel</b>.</i>")
        else:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—ã–ª–∞–µ—Ç 2 –∫–∞—Ä—Ç–∏–Ω–∫—É (style image)
            style_id = check_photo(user_id, photo)
            if not style_id:
                return
            send_message(user_id, "<b>–°—Ç–∏–ª—å-–∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>")
            message_id = send_sticker(user_id, 'loading')
            db.update_item(user_id, message_id)
            content = get_file(content_id)
            style = get_file(style_id)
            try:
                invoke_sm('NST', user_id, content, style)
            except Exception:
                db.delete_item(user_id)
                delete_message(user_id, message_id)
                send_message(user_id,
                             "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è –≤—ã–∫–ª—é—á–µ–Ω. <b>/help - –ø–æ–¥—Ä–æ–±–Ω–µ–µ.</b>")

    else:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—ã–ª–∞–µ—Ç 1 –∫–∞—Ä—Ç–∏–Ω–∫—É (content image)
        content_id = check_photo(user_id, photo)
        if not content_id:
            return
        db.put_item(user_id, content_id)
        send_message(user_id,
                     "<b>–ö–æ–Ω—Ç–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Ç–∏–ª—å-–∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å!üëáüëá",
                     style_markup)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def check_photo(user_id, photos):
    # –±–µ—Ä—ë–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é maxsize
    photos.reverse()
    for photo in photos:
        if photo['file_size'] < maxsize * 1000:
            return photo['file_id']

    send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
def commands_handler(user_id, command, db):
    commands = ['/start', '/help', '/cancel']
    if command not in commands:
        send_message(user_id, "<b>–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>")
        return
    if command == '/start':
        db.delete_item(user_id)
        send_sticker(user_id, 'start')
        send_message(user_id,
                     "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!")
    elif command == '/help':
        help_text = """
<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–ù–∞–ø–∏—à–∏—Ç–µ @JwDaKing –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è.
–ó–∞—Ç–µ–º –Ω–∞–±–µ—Ä–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\nhttps://github.com/Davie506/TelegramStyleBot
                    """

        send_message(user_id, help_text)
    elif command == '/cancel':
        db.delete_item(user_id)
        send_message(user_id, "<b>–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω!</b>\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É —Å–Ω–æ–≤–∞!</i>",
                     content_markup)


def invoke_sm(net_type, chat_id, content, style):
    body = {'content': content, 'style': style,
            'bot_token': Token, 'chat_id': chat_id}

    if net_type == 'NST':
        name = 'NeuralStyleTransferPoint'
        body['max_imgsize'] = 1024
        body['num_steps'] = 200
    elif net_type == 'CycleGAN':
        name = 'CycleGANPoint'
    else:
        print(f"net_type {net_type} not found")
        return

    client = boto3.client('sagemaker-runtime')
    client.invoke_endpoint(
    EndpointName=name,
    Body=json.dumps(body),
    ContentType='application/json',
    )




class DynamoDB:
    def __init__(self, name):
        dynamodb = boto3.resource('dynamodb')
        self.table = dynamodb.Table(name)

    def get_item(self, user_id):
        response = self.table.get_item(Key={'user_id': user_id})
        if 'Item' in response.keys():
            return response['Item']['file_id']

    def put_item(self, user_id, file_id):
        self.table.put_item(
            Item={
                'user_id': user_id,
                'file_id': file_id,
            }
        )

    def update_item(self, user_id, message_id):
        self.table.update_item(
            Key={
                'user_id': user_id
            },
            UpdateExpression="set file_id=:w",
            ExpressionAttributeValues={
                ':w': f'wait{message_id}'
            })

    def delete_item(self, user_id):
        self.table.delete_item(
            Key={
                'user_id': user_id,
            }
        )


# Telegram methods
def send_message(chat_id, text, reply_markup=None):
    url = URL + "sendMessage?chat_id={}&text={}&parse_mode=HTML".format(chat_id, text)
    if reply_markup:
        url += f"&reply_markup={json.dumps(reply_markup)}"
    requests.get(url)


def delete_message(chat_id, message_id):
    url = URL + "deleteMessage?chat_id={}&message_id={}".format(chat_id, message_id)
    requests.get(url)


def send_sticker(chat_id, sticker):
        stickers = {
            'start': 'CAACAgIAAxkBAAMzXrVojwLgjpqLL8gJ4HbWwzLAO2oAAgEBAAJWnb0KIr6fDrjC5jQZBA',
            'loading': 'CAACAgIAAxkBAAN_Xre2LtYeBDA-3_ewh5kMueCsRWsAAgIBAAJWnb0KTuJsgctA5P8ZBA'
        }
        url = URL + "sendSticker?chat_id={}&sticker={}&parse_mode=HTML".format(chat_id, stickers[sticker])
        r = requests.get(url).json()
        return r['result']['message_id']


def get_file(file_id):
    url = URL + "getFile?file_id={}".format(file_id)
    r = requests.get(url)
    file = json.loads(r.content)
    assert file['result']['file_size'] <= maxsize * 1000
    file_path = file['result']['file_path']
    url = 'https://api.telegram.org/file/bot{}/{}'.format(Token, file_path)
    return url
